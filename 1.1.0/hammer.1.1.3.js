(function(window,undefined){'use strict';var Hammer=function Hammer(element,options){return new Hammer.Instance(element,options||{})};Hammer.VERSION='1.1.3';Hammer.defaults= {behavior:{userSelect:'none',touchAction:'pan-y',touchCallout:'none',contentZooming:'none',userDrag:'none',tapHighlightColor:'rgba(0,0,0,0)'}};Hammer.DOCUMENT=document;Hammer.HAS_POINTEREVENTS=navigator.pointerEnabled||navigator.msPointerEnabled;Hammer.HAS_TOUCHEVENTS=('ontouchstart'in window);Hammer.IS_MOBILE=/mobile|tablet|ip(ad|hone|od)|android|silk/i.test(navigator.userAgent);Hammer.NO_MOUSEEVENTS=(Hammer.HAS_TOUCHEVENTS&&Hammer.IS_MOBILE)||Hammer.HAS_POINTEREVENTS;Hammer.CALCULATE_INTERVAL=25;var EVENT_TYPES= {};var DIRECTION_DOWN=Hammer.DIRECTION_DOWN='down';var DIRECTION_LEFT=Hammer.DIRECTION_LEFT='left';var DIRECTION_UP=Hammer.DIRECTION_UP='up';var DIRECTION_RIGHT=Hammer.DIRECTION_RIGHT='right';var POINTER_MOUSE=Hammer.POINTER_MOUSE='mouse';var POINTER_TOUCH=Hammer.POINTER_TOUCH='touch';var POINTER_PEN=Hammer.POINTER_PEN='pen';var EVENT_START=Hammer.EVENT_START='start';var EVENT_MOVE=Hammer.EVENT_MOVE='move';var EVENT_END=Hammer.EVENT_END='end';var EVENT_RELEASE=Hammer.EVENT_RELEASE='release';var EVENT_TOUCH=Hammer.EVENT_TOUCH='touch';Hammer.READY=false;Hammer.plugins=Hammer.plugins||{};Hammer.gestures=Hammer.gestures||{};function setup(){if(Hammer.READY){return}Event.determineEventTypes();Utils.each(Hammer.gestures,function(gesture){Detection.register(gesture)});Event.onTouch(Hammer.DOCUMENT,EVENT_MOVE,Detection.detect);Event.onTouch(Hammer.DOCUMENT,EVENT_END,Detection.detect);Hammer.READY=true}var Utils=Hammer.utils= {extend:function extend(dest,src,merge){for(var key in src){if(!src.hasOwnProperty(key)||(dest[key]!==undefined&&merge)){continue}dest[key]=src[key]}return dest},on:function on(element,type,handler){if(!element.addEventListener){element.attachEvent(type,handler)}else{element.addEventListener(type,handler,false)}},off:function off(element,type,handler){element.removeEventListener(type,handler,false)},each:function each(obj,iterator,context){var i,len;if('forEach'in obj){obj.forEach(iterator,context)}else if(obj.length!==undefined){for(i=0,len=obj.length;i<len;i++){if(iterator.call(context,obj[i],i,obj)===false){return}}}else{for(i in obj){if(obj.hasOwnProperty(i)&&iterator.call(context,obj[i],i,obj)===false){return}}}},inStr:function inStr(src,find){return src.indexOf(find)>-1},inArray:function inArray(src,find){if(src.indexOf){var index=src.indexOf(find);return(index===-1)?false:index}else{for(var i=0,len=src.length;i<len;i++){if(src[i]===find){return i}}return false}},toArray:function toArray(obj){return Array.prototype.slice.call(obj,0)},hasParent:function hasParent(node,parent){while(node){if(node==parent){return true}node=node.parentNode}return false},getCenter:function getCenter(touches){var pageX=[],pageY=[],clientX=[],clientY=[],min=Math.min,max=Math.max;if(touches.length===1){return{pageX:touches[0].pageX,pageY:touches[0].pageY,clientX:touches[0].clientX,clientY:touches[0].clientY}}Utils.each(touches,function(touch){pageX.push(touch.pageX);pageY.push(touch.pageY);clientX.push(touch.clientX);clientY.push(touch.clientY)});return{pageX:(min.apply(Math,pageX)+max.apply(Math,pageX))/2,pageY:(min.apply(Math,pageY)+max.apply(Math,pageY))/2,clientX:(min.apply(Math,clientX)+max.apply(Math,clientX))/2,clientY:(min.apply(Math,clientY)+max.apply(Math,clientY))/2}},getVelocity:function getVelocity(deltaTime,deltaX,deltaY){return{x:Math.abs(deltaX/deltaTime)||0,y:Math.abs(deltaY/deltaTime)||0}},getAngle:function getAngle(touch1,touch2){var x=touch2.clientX-touch1.clientX,y=touch2.clientY-touch1.clientY;return Math.atan2(y,x)*180/Math.PI},getDirection:function getDirection(touch1,touch2){var x=Math.abs(touch1.clientX-touch2.clientX),y=Math.abs(touch1.clientY-touch2.clientY);if(x>=y){return touch1.clientX-touch2.clientX>0?DIRECTION_LEFT:DIRECTION_RIGHT}return touch1.clientY-touch2.clientY>0?DIRECTION_UP:DIRECTION_DOWN},getDistance:function getDistance(touch1,touch2){var x=touch2.clientX-touch1.clientX,y=touch2.clientY-touch1.clientY;return Math.sqrt((x*x)+(y*y))},getScale:function getScale(start,end){if(start.length>=2&&end.length>=2){return this.getDistance(end[0],end[1])/this.getDistance(start[0],start[1])}return 1},getRotation:function getRotation(start,end){if(start.length>=2&&end.length>=2){return this.getAngle(end[1],end[0])-this.getAngle(start[1],start[0])}return 0},isVertical:function isVertical(direction){return direction==DIRECTION_UP||direction==DIRECTION_DOWN},setPrefixedCss:function setPrefixedCss(element,prop,value,toggle){var prefixes=['','Webkit','Moz','O','ms'];prop=Utils.toCamelCase(prop);for(var i=0;i<prefixes.length;i++){var p=prop;if(prefixes[i]){p=prefixes[i]+p.slice(0,1).toUpperCase()+p.slice(1)}if(p in element.style){element.style[p]=(toggle==null||toggle)&&value||'';break}}},toggleBehavior:function toggleBehavior(element,props,toggle){if(!props||!element||!element.style){return}Utils.each(props,function(value,prop){Utils.setPrefixedCss(element,prop,value,toggle)});var falseFn=toggle&&function(){return false};if(props.userSelect=='none'){element.onselectstart=falseFn}if(props.userDrag=='none'){element.ondragstart=falseFn}},toCamelCase:function toCamelCase(str){return str.replace(/[_-]([a-z])/g,function(s){return s[1].toUpperCase()})}};var Event=Hammer.event= {preventMouseEvents:false,started:false,shouldDetect:false,on:function on(element,type,handler,hook){var types=type.split(' ');Utils.each(types,function(type){Utils.on(element,type,handler);hook&&hook(type)})},off:function off(element,type,handler,hook){var types=type.split(' ');Utils.each(types,function(type){Utils.off(element,type,handler);hook&&hook(type)})},onTouch:function onTouch(element,eventType,handler){var self=this;var onTouchHandler=function onTouchHandler(ev){var srcType=ev.type.toLowerCase(),isPointer=Hammer.HAS_POINTEREVENTS,isMouse=Utils.inStr(srcType,'mouse'),triggerType;if(isMouse&&self.preventMouseEvents){return}else if(isMouse&&eventType==EVENT_START&&ev.button===0){self.preventMouseEvents=false;self.shouldDetect=true}else if(isPointer&&eventType==EVENT_START){self.shouldDetect=(ev.buttons===1||PointerEvent.matchType(POINTER_TOUCH,ev))}else if(!isMouse&&eventType==EVENT_START){self.preventMouseEvents=true;self.shouldDetect=true}if(isPointer&&eventType!=EVENT_END){PointerEvent.updatePointer(eventType,ev)}if(self.shouldDetect){triggerType=self.doDetect.call(self,ev,eventType,element,handler)}if(triggerType==EVENT_END){self.preventMouseEvents=false;self.shouldDetect=false;PointerEvent.reset()}if(isPointer&&eventType==EVENT_END){PointerEvent.updatePointer(eventType,ev)}};this.on(element,EVENT_TYPES[eventType],onTouchHandler);return onTouchHandler},doDetect:function doDetect(ev,eventType,element,handler){var touchList=this.getTouchList(ev,eventType);var touchListLength=touchList.length;var triggerType=eventType;var triggerChange=touchList.trigger;var changedLength=touchListLength;if(eventType==EVENT_START){triggerChange=EVENT_TOUCH}else if(eventType==EVENT_END){triggerChange=EVENT_RELEASE;changedLength=touchList.length-((ev.changedTouches)?ev.changedTouches.length:1)}if(changedLength>0&&this.started){triggerType=EVENT_MOVE}this.started=true;var evData=this.collectEventData(element,triggerType,touchList,ev);if(eventType!=EVENT_END){handler.call(Detection,evData)}if(triggerChange){evData.changedLength=changedLength;evData.eventType=triggerChange;handler.call(Detection,evData);evData.eventType=triggerType;delete evData.changedLength}if(triggerType==EVENT_END){handler.call(Detection,evData);this.started=false}return triggerType},determineEventTypes:function determineEventTypes(){var types;if(Hammer.HAS_POINTEREVENTS){if(window.PointerEvent){types=['pointerdown','pointermove','pointerup pointercancel lostpointercapture']}else{types=['MSPointerDown','MSPointerMove','MSPointerUp MSPointerCancel MSLostPointerCapture']}}else if(Hammer.NO_MOUSEEVENTS){types=['touchstart','touchmove','touchend touchcancel']}else{types=['touchstart mousedown','touchmove mousemove','touchend touchcancel mouseup']}EVENT_TYPES[EVENT_START]=types[0];EVENT_TYPES[EVENT_MOVE]=types[1];EVENT_TYPES[EVENT_END]=types[2];return EVENT_TYPES},getTouchList:function getTouchList(ev,eventType){if(Hammer.HAS_POINTEREVENTS){return PointerEvent.getTouchList()}if(ev.touches){if(eventType==EVENT_MOVE){return ev.touches}var identifiers=[];var concat=[].concat(Utils.toArray(ev.touches),Utils.toArray(ev.changedTouches));var touchList=[];Utils.each(concat,function(touch){if(Utils.inArray(identifiers,touch.identifier)===false){touchList.push(touch)}identifiers.push(touch.identifier)});return touchList}ev.identifier=1;return[ev]},collectEventData:function collectEventData(element,eventType,touches,ev){var pointerType=POINTER_TOUCH;if(Utils.inStr(ev.type,'mouse')||PointerEvent.matchType(POINTER_MOUSE,ev)){pointerType=POINTER_MOUSE}else if(PointerEvent.matchType(POINTER_PEN,ev)){pointerType=POINTER_PEN}return{center:Utils.getCenter(touches),timeStamp:Date.now(),target:ev.target,touches:touches,eventType:eventType,pointerType:pointerType,srcEvent:ev,preventDefault:function(){var srcEvent=this.srcEvent;srcEvent.preventManipulation&&srcEvent.preventManipulation();srcEvent.preventDefault&&srcEvent.preventDefault()},stopPropagation:function(){this.srcEvent.stopPropagation()},stopDetect:function(){return Detection.stopDetect()}}}};var PointerEvent=Hammer.PointerEvent= {pointers:{},getTouchList:function getTouchList(){var touchlist=[];Utils.each(this.pointers,function(pointer){touchlist.push(pointer)});return touchlist},updatePointer:function updatePointer(eventType,pointerEvent){if(eventType==EVENT_END){delete this.pointers[pointerEvent.pointerId]}else{pointerEvent.identifier=pointerEvent.pointerId;this.pointers[pointerEvent.pointerId]=pointerEvent}},matchType:function matchType(pointerType,ev){if(!ev.pointerType){return false}var pt=ev.pointerType,types= {};types[POINTER_MOUSE]=(pt===(ev.MSPOINTER_TYPE_MOUSE||POINTER_MOUSE));types[POINTER_TOUCH]=(pt===(ev.MSPOINTER_TYPE_TOUCH||POINTER_TOUCH));types[POINTER_PEN]=(pt===(ev.MSPOINTER_TYPE_PEN||POINTER_PEN));return types[pointerType]},reset:function resetList(){this.pointers= {}}};var Detection=Hammer.detection= {gestures:[],current:null,previous:null,stopped:false,startDetect:function startDetect(inst,eventData){if(this.current){return}this.stopped=false;this.current= {inst:inst,startEvent:Utils.extend({},eventData),lastEvent:false,lastCalcEvent:false,futureCalcEvent:false,lastCalcData:{},name:''};this.detect(eventData)},detect:function detect(eventData){if(!this.current||this.stopped){return}eventData=this.extendEventData(eventData);var inst=this.current.inst,instOptions=inst.options;Utils.each(this.gestures,function triggerGesture(gesture){if(!this.stopped&&inst.enabled&&instOptions[gesture.name]){gesture.handler.call(gesture,eventData,inst)}},this);if(this.current){this.current.lastEvent=eventData}if(eventData.eventType==EVENT_END){this.stopDetect()}return eventData},stopDetect:function stopDetect(){this.previous=Utils.extend({},this.current);this.current=null;this.stopped=true},getCalculatedData:function getCalculatedData(ev,center,deltaTime,deltaX,deltaY){var cur=this.current,recalc=false,calcEv=cur.lastCalcEvent,calcData=cur.lastCalcData;if(calcEv&&ev.timeStamp-calcEv.timeStamp>Hammer.CALCULATE_INTERVAL){center=calcEv.center;deltaTime=ev.timeStamp-calcEv.timeStamp;deltaX=ev.center.clientX-calcEv.center.clientX;deltaY=ev.center.clientY-calcEv.center.clientY;recalc=true}if(ev.eventType==EVENT_TOUCH||ev.eventType==EVENT_RELEASE){cur.futureCalcEvent=ev}if(!cur.lastCalcEvent||recalc){calcData.velocity=Utils.getVelocity(deltaTime,deltaX,deltaY);calcData.angle=Utils.getAngle(center,ev.center);calcData.direction=Utils.getDirection(center,ev.center);cur.lastCalcEvent=cur.futureCalcEvent||ev;cur.futureCalcEvent=ev}ev.velocityX=calcData.velocity.x;ev.velocityY=calcData.velocity.y;ev.interimAngle=calcData.angle;ev.interimDirection=calcData.direction},extendEventData:function extendEventData(ev){var cur=this.current,startEv=cur.startEvent,lastEv=cur.lastEvent||startEv;if(ev.eventType==EVENT_TOUCH||ev.eventType==EVENT_RELEASE){startEv.touches=[];Utils.each(ev.touches,function(touch){startEv.touches.push({clientX:touch.clientX,clientY:touch.clientY})})}var deltaTime=ev.timeStamp-startEv.timeStamp,deltaX=ev.center.clientX-startEv.center.clientX,deltaY=ev.center.clientY-startEv.center.clientY;this.getCalculatedData(ev,lastEv.center,deltaTime,deltaX,deltaY);Utils.extend(ev,{startEvent:startEv,deltaTime:deltaTime,deltaX:deltaX,deltaY:deltaY,distance:Utils.getDistance(startEv.center,ev.center),angle:Utils.getAngle(startEv.center,ev.center),direction:Utils.getDirection(startEv.center,ev.center),scale:Utils.getScale(startEv.touches,ev.touches),rotation:Utils.getRotation(startEv.touches,ev.touches)});return ev},register:function register(gesture){var options=gesture.defaults||{};if(options[gesture.name]===undefined){options[gesture.name]=true}Utils.extend(Hammer.defaults,options,true);gesture.index=gesture.index||1000;this.gestures.push(gesture);this.gestures.sort(function(a,b){if(a.index<b.index){return-1}if(a.index>b.index){return 1}return 0});return this.gestures}};Hammer.Instance=function(element,options){var self=this;setup();this.element=element;this.enabled=true;Utils.each(options,function(value,name){delete options[name];options[Utils.toCamelCase(name)]=value});this.options=Utils.extend(Utils.extend({},Hammer.defaults),options||{});if(this.options.behavior){Utils.toggleBehavior(this.element,this.options.behavior,true)}this.eventStartHandler=Event.onTouch(element,EVENT_START,function(ev){if(self.enabled&&ev.eventType==EVENT_START){Detection.startDetect(self,ev)}else if(ev.eventType==EVENT_TOUCH){Detection.detect(ev)}});this.eventHandlers=[]};Hammer.Instance.prototype= {on:function onEvent(gestures,handler){var self=this;Event.on(self.element,gestures,handler,function(type){self.eventHandlers.push({gesture:type,handler:handler})});return self},off:function offEvent(gestures,handler){var self=this;Event.off(self.element,gestures,handler,function(type){var index=Utils.inArray({gesture:type,handler:handler});if(index!==false){self.eventHandlers.splice(index,1)}});return self},trigger:function triggerEvent(gesture,eventData){if(!eventData){eventData= {}}var event=Hammer.DOCUMENT.createEvent('Event');event.initEvent(gesture,true,true);event.gesture=eventData;var element=this.element;if(Utils.hasParent(eventData.target,element)){element=eventData.target}element.dispatchEvent(event);return this},enable:function enable(state){this.enabled=state;return this},dispose:function dispose(){var i,eh;Utils.toggleBehavior(this.element,this.options.behavior,false);for(i=-1;(eh=this.eventHandlers[++i]);){Utils.off(this.element,eh.gesture,eh.handler)}this.eventHandlers=[];Event.off(this.element,EVENT_TYPES[EVENT_START],this.eventStartHandler);return null}};(function(name){var triggered=false;function dragGesture(ev,inst){var cur=Detection.current;if(inst.options.dragMaxTouches>0&&ev.touches.length>inst.options.dragMaxTouches){return}switch(ev.eventType){case EVENT_START:triggered=false;break;case EVENT_MOVE:if(ev.distance<inst.options.dragMinDistance&&cur.name!=name){return}var startCenter=cur.startEvent.center;if(cur.name!=name){cur.name=name;if(inst.options.dragDistanceCorrection&&ev.distance>0){var factor=Math.abs(inst.options.dragMinDistance/ev.distance);startCenter.pageX+=ev.deltaX*factor;startCenter.pageY+=ev.deltaY*factor;startCenter.clientX+=ev.deltaX*factor;startCenter.clientY+=ev.deltaY*factor;ev=Detection.extendEventData(ev)}}if(cur.lastEvent.dragLockToAxis||(inst.options.dragLockToAxis&&inst.options.dragLockMinDistance<=ev.distance)){ev.dragLockToAxis=true}var lastDirection=cur.lastEvent.direction;if(ev.dragLockToAxis&&lastDirection!==ev.direction){if(Utils.isVertical(lastDirection)){ev.direction=(ev.deltaY<0)?DIRECTION_UP:DIRECTION_DOWN}else{ev.direction=(ev.deltaX<0)?DIRECTION_LEFT:DIRECTION_RIGHT}}if(!triggered){inst.trigger(name+'start',ev);triggered=true}inst.trigger(name,ev);inst.trigger(name+ev.direction,ev);var isVertical=Utils.isVertical(ev.direction);if((inst.options.dragBlockVertical&&isVertical)||(inst.options.dragBlockHorizontal&&!isVertical)){ev.preventDefault()}break;case EVENT_RELEASE:if(triggered&&ev.changedLength<=inst.options.dragMaxTouches){inst.trigger(name+'end',ev);triggered=false}break;case EVENT_END:triggered=false;break}}Hammer.gestures.Drag= {name:name,index:50,handler:dragGesture,defaults:{dragMinDistance:10,dragDistanceCorrection:true,dragMaxTouches:1,dragBlockHorizontal:false,dragBlockVertical:false,dragLockToAxis:false,dragLockMinDistance:25}}})('drag');Hammer.gestures.Gesture= {name:'gesture',index:1337,handler:function releaseGesture(ev,inst){inst.trigger(this.name,ev)}};(function(name){var timer;function holdGesture(ev,inst){var options=inst.options,current=Detection.current;switch(ev.eventType){case EVENT_START:clearTimeout(timer);current.name=name;timer=setTimeout(function(){if(current&&current.name==name){inst.trigger(name,ev)}},options.holdTimeout);break;case EVENT_MOVE:if(ev.distance>options.holdThreshold){clearTimeout(timer)}break;case EVENT_RELEASE:clearTimeout(timer);break}}Hammer.gestures.Hold= {name:name,index:10,defaults:{holdTimeout:500,holdThreshold:2},handler:holdGesture}})('hold');Hammer.gestures.Release= {name:'release',index:Infinity,handler:function releaseGesture(ev,inst){if(ev.eventType==EVENT_RELEASE){inst.trigger(this.name,ev)}}};Hammer.gestures.Swipe= {name:'swipe',index:40,defaults:{swipeMinTouches:1,swipeMaxTouches:1,swipeVelocityX:0.6,swipeVelocityY:0.6},handler:function swipeGesture(ev,inst){if(ev.eventType==EVENT_RELEASE){var touches=ev.touches.length,options=inst.options;if(touches<options.swipeMinTouches||touches>options.swipeMaxTouches){return}if(ev.velocityX>options.swipeVelocityX||ev.velocityY>options.swipeVelocityY){inst.trigger(this.name,ev);inst.trigger(this.name+ev.direction,ev)}}}};(function(name){var hasMoved=false;function tapGesture(ev,inst){var options=inst.options,current=Detection.current,prev=Detection.previous,sincePrev,didDoubleTap;switch(ev.eventType){case EVENT_START:hasMoved=false;break;case EVENT_MOVE:hasMoved=hasMoved||(ev.distance>options.tapMaxDistance);break;case EVENT_END:if(!Utils.inStr(ev.srcEvent.type,'cancel')&&ev.deltaTime<options.tapMaxTime&&!hasMoved){sincePrev=prev&&prev.lastEvent&&ev.timeStamp-prev.lastEvent.timeStamp;didDoubleTap=false;if(prev&&prev.name==name&&(sincePrev&&sincePrev<options.doubleTapInterval)&&ev.distance<options.doubleTapDistance){inst.trigger('doubletap',ev);didDoubleTap=true}if(!didDoubleTap||options.tapAlways){current.name=name;inst.trigger(current.name,ev)}}break}}Hammer.gestures.Tap= {name:name,index:100,handler:tapGesture,defaults:{tapMaxTime:250,tapMaxDistance:10,tapAlways:true,doubleTapDistance:20,doubleTapInterval:300}}})('tap');Hammer.gestures.Touch= {name:'touch',index:-Infinity,defaults:{preventDefault:false,preventMouse:false},handler:function touchGesture(ev,inst){if(inst.options.preventMouse&&ev.pointerType==POINTER_MOUSE){ev.stopDetect();return}if(inst.options.preventDefault){ev.preventDefault()}if(ev.eventType==EVENT_TOUCH){inst.trigger('touch',ev)}}};(function(name){var triggered=false;function transformGesture(ev,inst){switch(ev.eventType){case EVENT_START:triggered=false;break;case EVENT_MOVE:if(ev.touches.length<2){return}var scaleThreshold=Math.abs(1-ev.scale);var rotationThreshold=Math.abs(ev.rotation);if(scaleThreshold<inst.options.transformMinScale&&rotationThreshold<inst.options.transformMinRotation){return}Detection.current.name=name;if(!triggered){inst.trigger(name+'start',ev);triggered=true}inst.trigger(name,ev);if(rotationThreshold>inst.options.transformMinRotation){inst.trigger('rotate',ev)}if(scaleThreshold>inst.options.transformMinScale){inst.trigger('pinch',ev);inst.trigger('pinch'+(ev.scale<1?'in':'out'),ev)}break;case EVENT_RELEASE:if(triggered&&ev.changedLength<2){inst.trigger(name+'end',ev);triggered=false}break}}Hammer.gestures.Transform= {name:name,index:45,defaults:{transformMinScale:0.01,transformMinRotation:1},handler:transformGesture}})('transform');if(typeof define=='function'&&define.amd){define(function(){return Hammer})}else if(typeof module!=='undefined'&&module.exports){module.exports=Hammer}else{window.Hammer=Hammer}})(window);